{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/ahabbsheraz/flan-t5-fine-tuning?scriptVersionId=189974919\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# FLAN-T5 Fine-tuning\nNotebook created by M. Ahabb Sheraz","metadata":{}},{"cell_type":"markdown","source":"## Download Medical Dataset","metadata":{}},{"cell_type":"code","source":"!pip install datasets","metadata":{"execution":{"iopub.status.busy":"2024-07-27T08:29:44.31551Z","iopub.execute_input":"2024-07-27T08:29:44.315765Z","iopub.status.idle":"2024-07-27T08:29:57.735021Z","shell.execute_reply.started":"2024-07-27T08:29:44.315741Z","shell.execute_reply":"2024-07-27T08:29:57.734045Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from datasets import load_dataset\ndataset = load_dataset(\"medalpaca/medical_meadow_medical_flashcards\", trust_remote_code=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T08:30:36.607555Z","iopub.execute_input":"2024-07-27T08:30:36.608301Z","iopub.status.idle":"2024-07-27T08:30:40.452363Z","shell.execute_reply.started":"2024-07-27T08:30:36.608263Z","shell.execute_reply":"2024-07-27T08:30:40.451608Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Exploration over train samples\ndataset['train'][14]","metadata":{"execution":{"iopub.status.busy":"2024-07-27T08:30:45.531628Z","iopub.execute_input":"2024-07-27T08:30:45.531985Z","iopub.status.idle":"2024-07-27T08:30:45.541328Z","shell.execute_reply.started":"2024-07-27T08:30:45.531956Z","shell.execute_reply":"2024-07-27T08:30:45.540357Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install evaluate","metadata":{"execution":{"iopub.status.busy":"2024-07-27T08:31:30.077167Z","iopub.execute_input":"2024-07-27T08:31:30.077566Z","iopub.status.idle":"2024-07-27T08:31:43.29925Z","shell.execute_reply.started":"2024-07-27T08:31:30.077535Z","shell.execute_reply":"2024-07-27T08:31:43.298124Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Loading the FLAN-T5 Model","metadata":{}},{"cell_type":"code","source":"import nltk\nimport evaluate\nimport numpy as np\nfrom datasets import load_dataset\nfrom transformers import T5Tokenizer, DataCollatorForSeq2Seq\nfrom transformers import T5ForConditionalGeneration, Seq2SeqTrainingArguments, Seq2SeqTrainer","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-27T08:33:20.068625Z","iopub.execute_input":"2024-07-27T08:33:20.06955Z","iopub.status.idle":"2024-07-27T08:33:36.07082Z","shell.execute_reply.started":"2024-07-27T08:33:20.069505Z","shell.execute_reply":"2024-07-27T08:33:36.069808Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Load the tokenizer, model, and data collator\nMODEL_NAME = \"google/flan-t5-small\"\n\ntokenizer = T5Tokenizer.from_pretrained(MODEL_NAME)\nmodel = T5ForConditionalGeneration.from_pretrained(MODEL_NAME)\ndata_collator = DataCollatorForSeq2Seq(tokenizer=tokenizer, model=model)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T08:33:52.92958Z","iopub.execute_input":"2024-07-27T08:33:52.930314Z","iopub.status.idle":"2024-07-27T08:33:56.209462Z","shell.execute_reply.started":"2024-07-27T08:33:52.930282Z","shell.execute_reply":"2024-07-27T08:33:56.208505Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Preparing Data for Fine-Tuning","metadata":{}},{"cell_type":"code","source":"dataset = dataset[\"train\"].train_test_split(test_size=0.3)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T08:36:13.788388Z","iopub.execute_input":"2024-07-27T08:36:13.789074Z","iopub.status.idle":"2024-07-27T08:36:13.819582Z","shell.execute_reply.started":"2024-07-27T08:36:13.78904Z","shell.execute_reply":"2024-07-27T08:36:13.818726Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"dataset","metadata":{"execution":{"iopub.status.busy":"2024-07-27T08:36:38.91593Z","iopub.execute_input":"2024-07-27T08:36:38.916663Z","iopub.status.idle":"2024-07-27T08:36:38.922472Z","shell.execute_reply.started":"2024-07-27T08:36:38.916629Z","shell.execute_reply":"2024-07-27T08:36:38.92151Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# We prefix our tasks with \"answer the question\"\nprefix = \"Answer this question truthfully: \"\n\n# Define the preprocessing function\n\ndef preprocess_function(examples):\n    \"\"\"Add prefix to the sentences, tokenize the text, and set the labels\"\"\"\n   # The \"inputs\" are the tokenized answer:\n    inputs = [prefix + doc for doc in examples[\"input\"]]\n    model_inputs = tokenizer(inputs, max_length=512, truncation=True)\n  \n   # The \"labels\" are the tokenized outputs:\n    labels = tokenizer(text_target=examples[\"output\"], \n                      max_length=512,         \n                      truncation=True)\n    model_inputs[\"labels\"] = labels[\"input_ids\"]\n    return model_inputs","metadata":{"execution":{"iopub.status.busy":"2024-07-27T09:24:22.564164Z","iopub.execute_input":"2024-07-27T09:24:22.565497Z","iopub.status.idle":"2024-07-27T09:24:22.576545Z","shell.execute_reply.started":"2024-07-27T09:24:22.565458Z","shell.execute_reply":"2024-07-27T09:24:22.573265Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Map the preprocessing function across our dataset\ntokenized_dataset = dataset.map(preprocess_function, batched=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T09:24:27.546086Z","iopub.execute_input":"2024-07-27T09:24:27.546535Z","iopub.status.idle":"2024-07-27T09:24:54.012097Z","shell.execute_reply.started":"2024-07-27T09:24:27.546501Z","shell.execute_reply":"2024-07-27T09:24:54.010964Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"tokenized_dataset['train'][14]","metadata":{"execution":{"iopub.status.busy":"2024-07-27T08:42:59.04655Z","iopub.execute_input":"2024-07-27T08:42:59.047348Z","iopub.status.idle":"2024-07-27T08:42:59.062261Z","shell.execute_reply.started":"2024-07-27T08:42:59.047317Z","shell.execute_reply":"2024-07-27T08:42:59.061294Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## FLAN-T5 Training and Fine-Tuning\n","metadata":{}},{"cell_type":"code","source":"!pip install rouge_score","metadata":{"execution":{"iopub.status.busy":"2024-07-27T08:44:57.746115Z","iopub.execute_input":"2024-07-27T08:44:57.747152Z","iopub.status.idle":"2024-07-27T08:45:12.601051Z","shell.execute_reply.started":"2024-07-27T08:44:57.747116Z","shell.execute_reply":"2024-07-27T08:45:12.599494Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"nltk.download(\"punkt\", quiet=True)\nmetric = evaluate.load(\"rouge\")","metadata":{"execution":{"iopub.status.busy":"2024-07-27T08:45:17.384771Z","iopub.execute_input":"2024-07-27T08:45:17.385453Z","iopub.status.idle":"2024-07-27T08:45:17.720086Z","shell.execute_reply.started":"2024-07-27T08:45:17.385413Z","shell.execute_reply":"2024-07-27T08:45:17.719169Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def compute_metrics(eval_preds):\n    preds, labels = eval_preds\n    # decode preds and labels\n    labels = np.where(labels != -100, labels, tokenizer.pad_token_id)\n    decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)\n    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)\n    \n    # rougeLSum expects newline after each sentence\n    decoded_preds = [\"\\n\".join(nltk.sent_tokenize(pred.strip())) for pred in decoded_preds]\n    decoded_labels = [\"\\n\".join(nltk.sent_tokenize(label.strip())) for label in decoded_labels]\n    result = metric.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)\n  \n    return result","metadata":{"execution":{"iopub.status.busy":"2024-07-27T08:46:39.337955Z","iopub.execute_input":"2024-07-27T08:46:39.338526Z","iopub.status.idle":"2024-07-27T08:46:39.347561Z","shell.execute_reply.started":"2024-07-27T08:46:39.338487Z","shell.execute_reply":"2024-07-27T08:46:39.346386Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"batch_size = 8\nnum_train_epochs = 3\n\n# Show the training loss with every epoch\nlogging_steps = len(tokenized_dataset[\"train\"]) // batch_size #184.125\n\n\n#default hyperparameters\nargs = Seq2SeqTrainingArguments(\n    output_dir=\"check\",\n    eval_strategy=\"epoch\",\n    learning_rate=5.6e-5,\n    per_device_train_batch_size=batch_size,\n    per_device_eval_batch_size=batch_size,\n    weight_decay=0.01,\n    save_total_limit=3,  #only save up to 3 checkpoints during training\n    num_train_epochs=num_train_epochs,\n    predict_with_generate=True,  #the decoder performs inference by predicting tokens one by one, and this is implemented by the modelâ€™s generate() method. Setting predict_with_generate=True tells the Seq2SeqTrainer to use that method for evaluation.\n    logging_steps=logging_steps\n)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T09:25:44.024017Z","iopub.execute_input":"2024-07-27T09:25:44.024706Z","iopub.status.idle":"2024-07-27T09:25:44.062075Z","shell.execute_reply.started":"2024-07-27T09:25:44.024671Z","shell.execute_reply":"2024-07-27T09:25:44.061353Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"trainer = Seq2SeqTrainer(\n   model=model,\n   args=args,\n   train_dataset=tokenized_dataset[\"train\"],\n   eval_dataset=tokenized_dataset[\"test\"],\n   tokenizer=tokenizer,\n   data_collator=data_collator,\n   compute_metrics=compute_metrics\n)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T09:25:47.522566Z","iopub.execute_input":"2024-07-27T09:25:47.523385Z","iopub.status.idle":"2024-07-27T09:25:47.53869Z","shell.execute_reply.started":"2024-07-27T09:25:47.523352Z","shell.execute_reply":"2024-07-27T09:25:47.537658Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"trainer.train()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T09:25:52.045893Z","iopub.execute_input":"2024-07-27T09:25:52.046738Z","iopub.status.idle":"2024-07-27T10:30:39.59691Z","shell.execute_reply.started":"2024-07-27T09:25:52.046704Z","shell.execute_reply":"2024-07-27T10:30:39.596072Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"trainer.save_model(\"/kaggle/working/\")","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:36:07.913254Z","iopub.execute_input":"2024-07-27T10:36:07.913631Z","iopub.status.idle":"2024-07-27T10:36:08.436832Z","shell.execute_reply.started":"2024-07-27T10:36:07.913603Z","shell.execute_reply":"2024-07-27T10:36:08.435793Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Model Inference","metadata":{}},{"cell_type":"code","source":"last_checkpoint = \"/kaggle/working/results/checkpoint-1000\"\n\nfinetuned_model = T5ForConditionalGeneration.from_pretrained(last_checkpoint)\ntokenizer = T5Tokenizer.from_pretrained(last_checkpoint)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:48:46.749519Z","iopub.execute_input":"2024-07-27T10:48:46.750264Z","iopub.status.idle":"2024-07-27T10:48:47.946819Z","shell.execute_reply.started":"2024-07-27T10:48:46.750222Z","shell.execute_reply":"2024-07-27T10:48:47.945618Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"my_question = \"What is the relationship between very low Mg2+ levels, PTH levels, and Ca2+ levels?\"\ninputs = \"Answer this question truthfully: \" + my_question","metadata":{"execution":{"iopub.status.busy":"2024-07-27T11:06:26.704328Z","iopub.execute_input":"2024-07-27T11:06:26.704696Z","iopub.status.idle":"2024-07-27T11:06:26.710711Z","shell.execute_reply.started":"2024-07-27T11:06:26.704665Z","shell.execute_reply":"2024-07-27T11:06:26.709567Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"inputs = tokenizer(inputs, return_tensors=\"pt\")\noutputs = finetuned_model.generate(**inputs)\nanswer = tokenizer.decode(outputs[0])\nactual = dataset['train']['output'][0]\nfrom textwrap import fill\n\nprint(\"Predicted answer: \", fill(answer, width=80))\nprint(\"Actual answer: \", fill(\"Very low Mg2+ levels correspond to low PTH levels which in turn results in low Ca2+ levels.\", width=80))","metadata":{"execution":{"iopub.status.busy":"2024-07-27T11:06:28.838454Z","iopub.execute_input":"2024-07-27T11:06:28.839356Z","iopub.status.idle":"2024-07-27T11:06:29.419582Z","shell.execute_reply.started":"2024-07-27T11:06:28.839322Z","shell.execute_reply":"2024-07-27T11:06:29.418282Z"},"trusted":true},"execution_count":null,"outputs":[]}]}